<configuration>
<!--    参考文章：https://www.cnblogs.com/softidea/p/17696368.html-->

    <!--RollingFileAppender继承自FileAppender，具有轮转日志文件的功能,是我们最常使用的Appender-->
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 支持多个 JVM 同时写一个文件,也叫严格模式，该模式为开启时，滚动策略只能使用TimeBasedRollingPolicy及其子策略 -->
        <!-- 同时，该模式开启时不支持设置file标签及文件压缩,所以这一点非常终要!!!!! -->
        <prudent>false</prudent>

        <!--要写入文件的名称,该名称不会受滚动策略影响。如果文件不存在，则新建，该标签只含有滚动策略触发节点前的日志信息，经过某次轮转后，该文件被置为空，原内容被重命名或压缩-->
        <file>/myJavaAppData/myApp.log</file>

        <!-- SizeAndTimeBasedRollingPolicy是基于时间和大小的滚动策略，几乎可以涵盖所有日志滚动需求场景，也是使用最多的策略 -->
        <!-- 该策略适用于1.1.7版本及之后的版本，之前的版本继续采用TimeBasedRollingPolicy加SizeAndTimeBasedFNATP组件实现 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">

            <!-- 基于时间和大小的轮转策略中fileNamePattern位置很重要，他决定了生成文件的名称及轮转时机,以及是否压缩 -->
            <!-- %d决定以什么时间维度轮转(但实际轮转时机取决于日志事件的到达时间)，比如%d{yyyy/MM}:每个月开始的时候轮转,%d默认为 yyyy-MM-dd：按天轮转 -->
            <!-- %i为文件按照maxFileSize大小规定轮转后的序号 -->
            <!-- 后缀以".zip"或".gz"结尾，则开启日志文件压缩 -->
            <fileNamePattern>/myJavaAppData/myApp-%d{yyyy-MM-dd}.%i.zip</fileNamePattern>
            <!-- 单个日志文件最大大小，当文件达到该大小则触发截断（以及压缩）-->
            <maxFileSize>10MB</maxFileSize>
            <!-- 日志文件保留最大时间滚动周期，比如当filaNamePattern中%d以为dd结尾时，则保留60天，也就是dd会影响到此处maxHistory的效果-->
            <maxHistory>1</maxHistory>
            <!-- 日志文件保留的总的最大大小-->
            <totalSizeCap>20MB</totalSizeCap>
        </rollingPolicy>

        <!-- encoder标签规定日志文件内容输出格式，具体参数参照logback官方文档 -->
        <encoder>
            <pattern>%msg%n</pattern>
        </encoder>
    </appender>

    <root level="DEBUG">
        <appender-ref ref="ROLLING" />
    </root>
</configuration>
